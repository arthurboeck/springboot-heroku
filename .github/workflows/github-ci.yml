# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: CI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  unit-test:
    name: Unit Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Test with Maven
        run: |
          chmod +x ./mvnw
          ./mvnw test
  
  snyk:
    name: Snyk Code Coverage
    needs: unit-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Build a Docker image
      run: docker build -t your/image-to-test .
    - name: Run Snyk to check Docker image for vulnerabilities
      # Snyk can be used to break the build when it detects vulnerabilities.
      # In this case we want to upload the issues to GitHub Code Scanning
      continue-on-error: true
      uses: snyk/actions/docker@14818c4695ecc4045f33c9cee9e795a788711ca4
      env:
        # In order to use the Snyk Action you will need to have a Snyk API token.
        # More details in https://github.com/snyk/actions#getting-your-snyk-token
        # or you can signup for free at https://snyk.io/login
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        image: your/image-to-test
        args: --file=Dockerfile
    - name: Upload result to GitHub Code Scanning
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: snyk.sarif

  build:
    name: Build
    needs: snyk
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: |
          chmod +x ./mvnw
          ./mvnw clean install -DskipTests

#  deploy:
#    name: Heroku Deploy
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: akhileshns/heroku-deploy@v3.12.12
#        with:
#          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
#          heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
#          heroku_email: ${{secrets.HEROKU_EMAIL}}
#          healthcheck: "https://${{secrets.HEROKU_APP_NAME}}.herokuapp.com/actuator/health"
